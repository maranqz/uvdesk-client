<?php
/**
 * CompanyApi
 * PHP version 5
 *
 * @category Class
 * @package  UvdeskApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Uvdesk api
 *
 * The UVdesk API correlates with the Representational State Transfer category (REST) that allows to perform several actions like reading, editing, deleting, adding data of the helpdesk system. Here, we are using subdomain in base path and Token Url. user must modify subdomain to his/her uvdesk subdomain for api access. If you want to download and use api client from top right section. Also then, you must replace subdomain with your subdomain name at uvdesk in downloaded client's baseUrl.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@uvdesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UvdeskApi\UvdeskApi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use UvdeskApi\ApiException;
use UvdeskApi\Configuration;
use UvdeskApi\HeaderSelector;
use UvdeskApi\ObjectSerializer;

/**
 * CompanyApi Class Doc Comment
 *
 * @category Class
 * @package  UvdeskApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanyApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getApiCompanySpam
     *
     * View company spam setting
     *
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getApiCompanySpam()
    {
        list($response) = $this->getApiCompanySpamWithHttpInfo();
        return $response;
    }

    /**
     * Operation getApiCompanySpamWithHttpInfo
     *
     * View company spam setting
     *
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiCompanySpamWithHttpInfo()
    {
        $returnType = 'object';
        $request = $this->getApiCompanySpamRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiCompanySpamAsync
     *
     * View company spam setting
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiCompanySpamAsync()
    {
        return $this->getApiCompanySpamAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiCompanySpamAsyncWithHttpInfo
     *
     * View company spam setting
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiCompanySpamAsyncWithHttpInfo()
    {
        $returnType = 'object';
        $request = $this->getApiCompanySpamRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiCompanySpam'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getApiCompanySpamRequest()
    {

        $resourcePath = '/company/spam.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiCompany
     *
     * edit company details
     *
     * @param  string $name support name (optional)
     * @param  string $support_email support email id (optional)
     * @param  string $next_ticket_id it should be kept greater than last ticket id (optional)
     * @param  string $timezone timezone like Asia/Kolkata (optional)
     * @param  string $pending_since no. of hours since customer last replied, to disable set to 0 (optional)
     * @param  string $default_mailbox mailbox id (optional)
     * @param  string $default_status default status (optional)
     * @param  string $default_priority default priority (optional)
     * @param  string $time_format time format like m-d-y G:i (optional)
     * @param  string $pending_notification_email_template EmailTemplate of pending Notification (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putApiCompany($name = null, $support_email = null, $next_ticket_id = null, $timezone = null, $pending_since = null, $default_mailbox = null, $default_status = null, $default_priority = null, $time_format = null, $pending_notification_email_template = null)
    {
        $this->putApiCompanyWithHttpInfo($name, $support_email, $next_ticket_id, $timezone, $pending_since, $default_mailbox, $default_status, $default_priority, $time_format, $pending_notification_email_template);
    }

    /**
     * Operation putApiCompanyWithHttpInfo
     *
     * edit company details
     *
     * @param  string $name support name (optional)
     * @param  string $support_email support email id (optional)
     * @param  string $next_ticket_id it should be kept greater than last ticket id (optional)
     * @param  string $timezone timezone like Asia/Kolkata (optional)
     * @param  string $pending_since no. of hours since customer last replied, to disable set to 0 (optional)
     * @param  string $default_mailbox mailbox id (optional)
     * @param  string $default_status default status (optional)
     * @param  string $default_priority default priority (optional)
     * @param  string $time_format time format like m-d-y G:i (optional)
     * @param  string $pending_notification_email_template EmailTemplate of pending Notification (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiCompanyWithHttpInfo($name = null, $support_email = null, $next_ticket_id = null, $timezone = null, $pending_since = null, $default_mailbox = null, $default_status = null, $default_priority = null, $time_format = null, $pending_notification_email_template = null)
    {
        $returnType = '';
        $request = $this->putApiCompanyRequest($name, $support_email, $next_ticket_id, $timezone, $pending_since, $default_mailbox, $default_status, $default_priority, $time_format, $pending_notification_email_template);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiCompanyAsync
     *
     * edit company details
     *
     * @param  string $name support name (optional)
     * @param  string $support_email support email id (optional)
     * @param  string $next_ticket_id it should be kept greater than last ticket id (optional)
     * @param  string $timezone timezone like Asia/Kolkata (optional)
     * @param  string $pending_since no. of hours since customer last replied, to disable set to 0 (optional)
     * @param  string $default_mailbox mailbox id (optional)
     * @param  string $default_status default status (optional)
     * @param  string $default_priority default priority (optional)
     * @param  string $time_format time format like m-d-y G:i (optional)
     * @param  string $pending_notification_email_template EmailTemplate of pending Notification (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiCompanyAsync($name = null, $support_email = null, $next_ticket_id = null, $timezone = null, $pending_since = null, $default_mailbox = null, $default_status = null, $default_priority = null, $time_format = null, $pending_notification_email_template = null)
    {
        return $this->putApiCompanyAsyncWithHttpInfo($name, $support_email, $next_ticket_id, $timezone, $pending_since, $default_mailbox, $default_status, $default_priority, $time_format, $pending_notification_email_template)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiCompanyAsyncWithHttpInfo
     *
     * edit company details
     *
     * @param  string $name support name (optional)
     * @param  string $support_email support email id (optional)
     * @param  string $next_ticket_id it should be kept greater than last ticket id (optional)
     * @param  string $timezone timezone like Asia/Kolkata (optional)
     * @param  string $pending_since no. of hours since customer last replied, to disable set to 0 (optional)
     * @param  string $default_mailbox mailbox id (optional)
     * @param  string $default_status default status (optional)
     * @param  string $default_priority default priority (optional)
     * @param  string $time_format time format like m-d-y G:i (optional)
     * @param  string $pending_notification_email_template EmailTemplate of pending Notification (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiCompanyAsyncWithHttpInfo($name = null, $support_email = null, $next_ticket_id = null, $timezone = null, $pending_since = null, $default_mailbox = null, $default_status = null, $default_priority = null, $time_format = null, $pending_notification_email_template = null)
    {
        $returnType = '';
        $request = $this->putApiCompanyRequest($name, $support_email, $next_ticket_id, $timezone, $pending_since, $default_mailbox, $default_status, $default_priority, $time_format, $pending_notification_email_template);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiCompany'
     *
     * @param  string $name support name (optional)
     * @param  string $support_email support email id (optional)
     * @param  string $next_ticket_id it should be kept greater than last ticket id (optional)
     * @param  string $timezone timezone like Asia/Kolkata (optional)
     * @param  string $pending_since no. of hours since customer last replied, to disable set to 0 (optional)
     * @param  string $default_mailbox mailbox id (optional)
     * @param  string $default_status default status (optional)
     * @param  string $default_priority default priority (optional)
     * @param  string $time_format time format like m-d-y G:i (optional)
     * @param  string $pending_notification_email_template EmailTemplate of pending Notification (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putApiCompanyRequest($name = null, $support_email = null, $next_ticket_id = null, $timezone = null, $pending_since = null, $default_mailbox = null, $default_status = null, $default_priority = null, $time_format = null, $pending_notification_email_template = null)
    {

        $resourcePath = '/company.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($support_email !== null) {
            $formParams['supportEmail'] = ObjectSerializer::toFormValue($support_email);
        }
        // form params
        if ($next_ticket_id !== null) {
            $formParams['nextTicketId'] = ObjectSerializer::toFormValue($next_ticket_id);
        }
        // form params
        if ($timezone !== null) {
            $formParams['timezone'] = ObjectSerializer::toFormValue($timezone);
        }
        // form params
        if ($pending_since !== null) {
            $formParams['pendingSince'] = ObjectSerializer::toFormValue($pending_since);
        }
        // form params
        if ($default_mailbox !== null) {
            $formParams['defaultMailbox'] = ObjectSerializer::toFormValue($default_mailbox);
        }
        // form params
        if ($default_status !== null) {
            $formParams['defaultStatus'] = ObjectSerializer::toFormValue($default_status);
        }
        // form params
        if ($default_priority !== null) {
            $formParams['defaultPriority'] = ObjectSerializer::toFormValue($default_priority);
        }
        // form params
        if ($time_format !== null) {
            $formParams['timeFormat'] = ObjectSerializer::toFormValue($time_format);
        }
        // form params
        if ($pending_notification_email_template !== null) {
            $formParams['pendingNotificationEmailTemplate'] = ObjectSerializer::toFormValue($pending_notification_email_template);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiCompanySpam
     *
     * edit Spam setting of company
     *
     * @param  string $black_list blacklist (optional)
     * @param  string $white_list whiteList (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putApiCompanySpam($black_list = null, $white_list = null)
    {
        $this->putApiCompanySpamWithHttpInfo($black_list, $white_list);
    }

    /**
     * Operation putApiCompanySpamWithHttpInfo
     *
     * edit Spam setting of company
     *
     * @param  string $black_list blacklist (optional)
     * @param  string $white_list whiteList (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiCompanySpamWithHttpInfo($black_list = null, $white_list = null)
    {
        $returnType = '';
        $request = $this->putApiCompanySpamRequest($black_list, $white_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiCompanySpamAsync
     *
     * edit Spam setting of company
     *
     * @param  string $black_list blacklist (optional)
     * @param  string $white_list whiteList (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiCompanySpamAsync($black_list = null, $white_list = null)
    {
        return $this->putApiCompanySpamAsyncWithHttpInfo($black_list, $white_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiCompanySpamAsyncWithHttpInfo
     *
     * edit Spam setting of company
     *
     * @param  string $black_list blacklist (optional)
     * @param  string $white_list whiteList (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiCompanySpamAsyncWithHttpInfo($black_list = null, $white_list = null)
    {
        $returnType = '';
        $request = $this->putApiCompanySpamRequest($black_list, $white_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiCompanySpam'
     *
     * @param  string $black_list blacklist (optional)
     * @param  string $white_list whiteList (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putApiCompanySpamRequest($black_list = null, $white_list = null)
    {

        $resourcePath = '/company/spam.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($black_list !== null) {
            $formParams['blackList'] = ObjectSerializer::toFormValue($black_list);
        }
        // form params
        if ($white_list !== null) {
            $formParams['whiteList'] = ObjectSerializer::toFormValue($white_list);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiCompanyTheme
     *
     * edit theme of company
     *
     * @param  string $name company Name (optional)
     * @param  string $domain domain name of website like webkul (optional)
     * @param  string $c_name website name (optional)
     * @param  string $status 0|1 for deactivated|activated (optional)
     * @param  string $logo Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $favicon Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $banner Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $custom_css css file (optional)
     * @param  string $page_background_color page background color of theme (optional)
     * @param  string $header_background_color header background color of theme (optional)
     * @param  string $nav_text_color navigation background color (optional)
     * @param  string $link_color link color of theme (optional)
     * @param  string $link_hover_color link hover color for theme (optional)
     * @param  string $article_text_color article text color for theme (optional)
     * @param  string $script any required script fot theme (optional)
     * @param  string $site_descritption site description (optional)
     * @param  string $meta_description meta description (optional)
     * @param  string $meta_keywords meta keywords to describe content on website (optional)
     * @param  string $homepage_content home page content category|article (optional)
     * @param  string $ticket_create_option if login required to create tickets (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putApiCompanyTheme($name = null, $domain = null, $c_name = null, $status = null, $logo = null, $favicon = null, $banner = null, $custom_css = null, $page_background_color = null, $header_background_color = null, $nav_text_color = null, $link_color = null, $link_hover_color = null, $article_text_color = null, $script = null, $site_descritption = null, $meta_description = null, $meta_keywords = null, $homepage_content = null, $ticket_create_option = null)
    {
        $this->putApiCompanyThemeWithHttpInfo($name, $domain, $c_name, $status, $logo, $favicon, $banner, $custom_css, $page_background_color, $header_background_color, $nav_text_color, $link_color, $link_hover_color, $article_text_color, $script, $site_descritption, $meta_description, $meta_keywords, $homepage_content, $ticket_create_option);
    }

    /**
     * Operation putApiCompanyThemeWithHttpInfo
     *
     * edit theme of company
     *
     * @param  string $name company Name (optional)
     * @param  string $domain domain name of website like webkul (optional)
     * @param  string $c_name website name (optional)
     * @param  string $status 0|1 for deactivated|activated (optional)
     * @param  string $logo Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $favicon Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $banner Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $custom_css css file (optional)
     * @param  string $page_background_color page background color of theme (optional)
     * @param  string $header_background_color header background color of theme (optional)
     * @param  string $nav_text_color navigation background color (optional)
     * @param  string $link_color link color of theme (optional)
     * @param  string $link_hover_color link hover color for theme (optional)
     * @param  string $article_text_color article text color for theme (optional)
     * @param  string $script any required script fot theme (optional)
     * @param  string $site_descritption site description (optional)
     * @param  string $meta_description meta description (optional)
     * @param  string $meta_keywords meta keywords to describe content on website (optional)
     * @param  string $homepage_content home page content category|article (optional)
     * @param  string $ticket_create_option if login required to create tickets (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiCompanyThemeWithHttpInfo($name = null, $domain = null, $c_name = null, $status = null, $logo = null, $favicon = null, $banner = null, $custom_css = null, $page_background_color = null, $header_background_color = null, $nav_text_color = null, $link_color = null, $link_hover_color = null, $article_text_color = null, $script = null, $site_descritption = null, $meta_description = null, $meta_keywords = null, $homepage_content = null, $ticket_create_option = null)
    {
        $returnType = '';
        $request = $this->putApiCompanyThemeRequest($name, $domain, $c_name, $status, $logo, $favicon, $banner, $custom_css, $page_background_color, $header_background_color, $nav_text_color, $link_color, $link_hover_color, $article_text_color, $script, $site_descritption, $meta_description, $meta_keywords, $homepage_content, $ticket_create_option);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putApiCompanyThemeAsync
     *
     * edit theme of company
     *
     * @param  string $name company Name (optional)
     * @param  string $domain domain name of website like webkul (optional)
     * @param  string $c_name website name (optional)
     * @param  string $status 0|1 for deactivated|activated (optional)
     * @param  string $logo Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $favicon Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $banner Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $custom_css css file (optional)
     * @param  string $page_background_color page background color of theme (optional)
     * @param  string $header_background_color header background color of theme (optional)
     * @param  string $nav_text_color navigation background color (optional)
     * @param  string $link_color link color of theme (optional)
     * @param  string $link_hover_color link hover color for theme (optional)
     * @param  string $article_text_color article text color for theme (optional)
     * @param  string $script any required script fot theme (optional)
     * @param  string $site_descritption site description (optional)
     * @param  string $meta_description meta description (optional)
     * @param  string $meta_keywords meta keywords to describe content on website (optional)
     * @param  string $homepage_content home page content category|article (optional)
     * @param  string $ticket_create_option if login required to create tickets (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiCompanyThemeAsync($name = null, $domain = null, $c_name = null, $status = null, $logo = null, $favicon = null, $banner = null, $custom_css = null, $page_background_color = null, $header_background_color = null, $nav_text_color = null, $link_color = null, $link_hover_color = null, $article_text_color = null, $script = null, $site_descritption = null, $meta_description = null, $meta_keywords = null, $homepage_content = null, $ticket_create_option = null)
    {
        return $this->putApiCompanyThemeAsyncWithHttpInfo($name, $domain, $c_name, $status, $logo, $favicon, $banner, $custom_css, $page_background_color, $header_background_color, $nav_text_color, $link_color, $link_hover_color, $article_text_color, $script, $site_descritption, $meta_description, $meta_keywords, $homepage_content, $ticket_create_option)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiCompanyThemeAsyncWithHttpInfo
     *
     * edit theme of company
     *
     * @param  string $name company Name (optional)
     * @param  string $domain domain name of website like webkul (optional)
     * @param  string $c_name website name (optional)
     * @param  string $status 0|1 for deactivated|activated (optional)
     * @param  string $logo Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $favicon Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $banner Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $custom_css css file (optional)
     * @param  string $page_background_color page background color of theme (optional)
     * @param  string $header_background_color header background color of theme (optional)
     * @param  string $nav_text_color navigation background color (optional)
     * @param  string $link_color link color of theme (optional)
     * @param  string $link_hover_color link hover color for theme (optional)
     * @param  string $article_text_color article text color for theme (optional)
     * @param  string $script any required script fot theme (optional)
     * @param  string $site_descritption site description (optional)
     * @param  string $meta_description meta description (optional)
     * @param  string $meta_keywords meta keywords to describe content on website (optional)
     * @param  string $homepage_content home page content category|article (optional)
     * @param  string $ticket_create_option if login required to create tickets (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiCompanyThemeAsyncWithHttpInfo($name = null, $domain = null, $c_name = null, $status = null, $logo = null, $favicon = null, $banner = null, $custom_css = null, $page_background_color = null, $header_background_color = null, $nav_text_color = null, $link_color = null, $link_hover_color = null, $article_text_color = null, $script = null, $site_descritption = null, $meta_description = null, $meta_keywords = null, $homepage_content = null, $ticket_create_option = null)
    {
        $returnType = '';
        $request = $this->putApiCompanyThemeRequest($name, $domain, $c_name, $status, $logo, $favicon, $banner, $custom_css, $page_background_color, $header_background_color, $nav_text_color, $link_color, $link_hover_color, $article_text_color, $script, $site_descritption, $meta_description, $meta_keywords, $homepage_content, $ticket_create_option);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiCompanyTheme'
     *
     * @param  string $name company Name (optional)
     * @param  string $domain domain name of website like webkul (optional)
     * @param  string $c_name website name (optional)
     * @param  string $status 0|1 for deactivated|activated (optional)
     * @param  string $logo Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $favicon Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $banner Jpg, Jpeg, Png images are allowed. (50x50 px) (optional)
     * @param  string $custom_css css file (optional)
     * @param  string $page_background_color page background color of theme (optional)
     * @param  string $header_background_color header background color of theme (optional)
     * @param  string $nav_text_color navigation background color (optional)
     * @param  string $link_color link color of theme (optional)
     * @param  string $link_hover_color link hover color for theme (optional)
     * @param  string $article_text_color article text color for theme (optional)
     * @param  string $script any required script fot theme (optional)
     * @param  string $site_descritption site description (optional)
     * @param  string $meta_description meta description (optional)
     * @param  string $meta_keywords meta keywords to describe content on website (optional)
     * @param  string $homepage_content home page content category|article (optional)
     * @param  string $ticket_create_option if login required to create tickets (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putApiCompanyThemeRequest($name = null, $domain = null, $c_name = null, $status = null, $logo = null, $favicon = null, $banner = null, $custom_css = null, $page_background_color = null, $header_background_color = null, $nav_text_color = null, $link_color = null, $link_hover_color = null, $article_text_color = null, $script = null, $site_descritption = null, $meta_description = null, $meta_keywords = null, $homepage_content = null, $ticket_create_option = null)
    {

        $resourcePath = '/company/theme.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($domain !== null) {
            $formParams['domain'] = ObjectSerializer::toFormValue($domain);
        }
        // form params
        if ($c_name !== null) {
            $formParams['cName'] = ObjectSerializer::toFormValue($c_name);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($logo !== null) {
            $formParams['logo'] = ObjectSerializer::toFormValue($logo);
        }
        // form params
        if ($favicon !== null) {
            $formParams['favicon'] = ObjectSerializer::toFormValue($favicon);
        }
        // form params
        if ($banner !== null) {
            $formParams['banner'] = ObjectSerializer::toFormValue($banner);
        }
        // form params
        if ($custom_css !== null) {
            $formParams['customCSS'] = ObjectSerializer::toFormValue($custom_css);
        }
        // form params
        if ($page_background_color !== null) {
            $formParams['pageBackgroundColor'] = ObjectSerializer::toFormValue($page_background_color);
        }
        // form params
        if ($header_background_color !== null) {
            $formParams['headerBackgroundColor'] = ObjectSerializer::toFormValue($header_background_color);
        }
        // form params
        if ($nav_text_color !== null) {
            $formParams['navTextColor'] = ObjectSerializer::toFormValue($nav_text_color);
        }
        // form params
        if ($link_color !== null) {
            $formParams['linkColor'] = ObjectSerializer::toFormValue($link_color);
        }
        // form params
        if ($link_hover_color !== null) {
            $formParams['linkHoverColor'] = ObjectSerializer::toFormValue($link_hover_color);
        }
        // form params
        if ($article_text_color !== null) {
            $formParams['articleTextColor'] = ObjectSerializer::toFormValue($article_text_color);
        }
        // form params
        if ($script !== null) {
            $formParams['script'] = ObjectSerializer::toFormValue($script);
        }
        // form params
        if ($site_descritption !== null) {
            $formParams['siteDescritption'] = ObjectSerializer::toFormValue($site_descritption);
        }
        // form params
        if ($meta_description !== null) {
            $formParams['metaDescription'] = ObjectSerializer::toFormValue($meta_description);
        }
        // form params
        if ($meta_keywords !== null) {
            $formParams['metaKeywords'] = ObjectSerializer::toFormValue($meta_keywords);
        }
        // form params
        if ($homepage_content !== null) {
            $formParams['homepageContent'] = ObjectSerializer::toFormValue($homepage_content);
        }
        // form params
        if ($ticket_create_option !== null) {
            $formParams['ticketCreateOption'] = ObjectSerializer::toFormValue($ticket_create_option);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
