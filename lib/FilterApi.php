<?php
/**
 * FilterApi
 * PHP version 5
 *
 * @category Class
 * @package  UvdeskApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Uvdesk api
 *
 * The UVdesk API correlates with the Representational State Transfer category (REST) that allows to perform several actions like reading, editing, deleting, adding data of the helpdesk system. Here, we are using subdomain in base path and Token Url. user must modify subdomain to his/her uvdesk subdomain for api access. If you want to download and use api client from top right section. Also then, you must replace subdomain with your subdomain name at uvdesk in downloaded client's baseUrl.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@uvdesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UvdeskApi\UvdeskApi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use UvdeskApi\ApiException;
use UvdeskApi\Configuration;
use UvdeskApi\HeaderSelector;
use UvdeskApi\ObjectSerializer;

/**
 * FilterApi Class Doc Comment
 *
 * @category Class
 * @package  UvdeskApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FilterApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getApiFilters
     *
     * Get filter data
     *
     * @param  int $group to get group data (optional)
     * @param  int $usergroup to get group data with corresponding subgroups (optional)
     * @param  int $team to get team data (optional)
     * @param  int $type to get type data (optional)
     * @param  int $priority to get priority data (optional)
     * @param  int $tag to get tag data (optional)
     * @param  int $mailbox to get mailbox data (optional)
     * @param  int $agent to get agent data (optional)
     * @param  int $customer to get customer data (optional)
     * @param  int $source to get source data (optional)
     * @param  int $userdata to get current user&#39;s data like roles (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getApiFilters($group = null, $usergroup = null, $team = null, $type = null, $priority = null, $tag = null, $mailbox = null, $agent = null, $customer = null, $source = null, $userdata = null)
    {
        list($response) = $this->getApiFiltersWithHttpInfo($group, $usergroup, $team, $type, $priority, $tag, $mailbox, $agent, $customer, $source, $userdata);
        return $response;
    }

    /**
     * Operation getApiFiltersWithHttpInfo
     *
     * Get filter data
     *
     * @param  int $group to get group data (optional)
     * @param  int $usergroup to get group data with corresponding subgroups (optional)
     * @param  int $team to get team data (optional)
     * @param  int $type to get type data (optional)
     * @param  int $priority to get priority data (optional)
     * @param  int $tag to get tag data (optional)
     * @param  int $mailbox to get mailbox data (optional)
     * @param  int $agent to get agent data (optional)
     * @param  int $customer to get customer data (optional)
     * @param  int $source to get source data (optional)
     * @param  int $userdata to get current user&#39;s data like roles (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiFiltersWithHttpInfo($group = null, $usergroup = null, $team = null, $type = null, $priority = null, $tag = null, $mailbox = null, $agent = null, $customer = null, $source = null, $userdata = null)
    {
        $returnType = 'object';
        $request = $this->getApiFiltersRequest($group, $usergroup, $team, $type, $priority, $tag, $mailbox, $agent, $customer, $source, $userdata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiFiltersAsync
     *
     * Get filter data
     *
     * @param  int $group to get group data (optional)
     * @param  int $usergroup to get group data with corresponding subgroups (optional)
     * @param  int $team to get team data (optional)
     * @param  int $type to get type data (optional)
     * @param  int $priority to get priority data (optional)
     * @param  int $tag to get tag data (optional)
     * @param  int $mailbox to get mailbox data (optional)
     * @param  int $agent to get agent data (optional)
     * @param  int $customer to get customer data (optional)
     * @param  int $source to get source data (optional)
     * @param  int $userdata to get current user&#39;s data like roles (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiFiltersAsync($group = null, $usergroup = null, $team = null, $type = null, $priority = null, $tag = null, $mailbox = null, $agent = null, $customer = null, $source = null, $userdata = null)
    {
        return $this->getApiFiltersAsyncWithHttpInfo($group, $usergroup, $team, $type, $priority, $tag, $mailbox, $agent, $customer, $source, $userdata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiFiltersAsyncWithHttpInfo
     *
     * Get filter data
     *
     * @param  int $group to get group data (optional)
     * @param  int $usergroup to get group data with corresponding subgroups (optional)
     * @param  int $team to get team data (optional)
     * @param  int $type to get type data (optional)
     * @param  int $priority to get priority data (optional)
     * @param  int $tag to get tag data (optional)
     * @param  int $mailbox to get mailbox data (optional)
     * @param  int $agent to get agent data (optional)
     * @param  int $customer to get customer data (optional)
     * @param  int $source to get source data (optional)
     * @param  int $userdata to get current user&#39;s data like roles (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiFiltersAsyncWithHttpInfo($group = null, $usergroup = null, $team = null, $type = null, $priority = null, $tag = null, $mailbox = null, $agent = null, $customer = null, $source = null, $userdata = null)
    {
        $returnType = 'object';
        $request = $this->getApiFiltersRequest($group, $usergroup, $team, $type, $priority, $tag, $mailbox, $agent, $customer, $source, $userdata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiFilters'
     *
     * @param  int $group to get group data (optional)
     * @param  int $usergroup to get group data with corresponding subgroups (optional)
     * @param  int $team to get team data (optional)
     * @param  int $type to get type data (optional)
     * @param  int $priority to get priority data (optional)
     * @param  int $tag to get tag data (optional)
     * @param  int $mailbox to get mailbox data (optional)
     * @param  int $agent to get agent data (optional)
     * @param  int $customer to get customer data (optional)
     * @param  int $source to get source data (optional)
     * @param  int $userdata to get current user&#39;s data like roles (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getApiFiltersRequest($group = null, $usergroup = null, $team = null, $type = null, $priority = null, $tag = null, $mailbox = null, $agent = null, $customer = null, $source = null, $userdata = null)
    {

        $resourcePath = '/filters.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($group !== null) {
            $queryParams['group'] = ObjectSerializer::toQueryValue($group);
        }
        // query params
        if ($usergroup !== null) {
            $queryParams['usergroup'] = ObjectSerializer::toQueryValue($usergroup);
        }
        // query params
        if ($team !== null) {
            $queryParams['team'] = ObjectSerializer::toQueryValue($team);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($priority !== null) {
            $queryParams['priority'] = ObjectSerializer::toQueryValue($priority);
        }
        // query params
        if ($tag !== null) {
            $queryParams['tag'] = ObjectSerializer::toQueryValue($tag);
        }
        // query params
        if ($mailbox !== null) {
            $queryParams['mailbox'] = ObjectSerializer::toQueryValue($mailbox);
        }
        // query params
        if ($agent !== null) {
            $queryParams['agent'] = ObjectSerializer::toQueryValue($agent);
        }
        // query params
        if ($customer !== null) {
            $queryParams['customer'] = ObjectSerializer::toQueryValue($customer);
        }
        // query params
        if ($source !== null) {
            $queryParams['source'] = ObjectSerializer::toQueryValue($source);
        }
        // query params
        if ($userdata !== null) {
            $queryParams['userdata'] = ObjectSerializer::toQueryValue($userdata);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
