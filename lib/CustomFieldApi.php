<?php
/**
 * CustomFieldApi
 * PHP version 5
 *
 * @category Class
 * @package  UvdeskApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Uvdesk api
 *
 * The UVdesk API correlates with the Representational State Transfer category (REST) that allows to perform several actions like reading, editing, deleting, adding data of the helpdesk system. Here, we are using subdomain in base path and Token Url. user must modify subdomain to his/her uvdesk subdomain for api access. If you want to download and use api client from top right section. Also then, you must replace subdomain with your subdomain name at uvdesk in downloaded client's baseUrl.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@uvdesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UvdeskApi\UvdeskApi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use UvdeskApi\ApiException;
use UvdeskApi\Configuration;
use UvdeskApi\HeaderSelector;
use UvdeskApi\ObjectSerializer;

/**
 * CustomFieldApi Class Doc Comment
 *
 * @category Class
 * @package  UvdeskApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomFieldApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteApiCustomField
     *
     * delete existing custom-field
     *
     * @param  string $field  (required)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteApiCustomField($field)
    {
        $this->deleteApiCustomFieldWithHttpInfo($field);
    }

    /**
     * Operation deleteApiCustomFieldWithHttpInfo
     *
     * delete existing custom-field
     *
     * @param  string $field  (required)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteApiCustomFieldWithHttpInfo($field)
    {
        $returnType = '';
        $request = $this->deleteApiCustomFieldRequest($field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteApiCustomFieldAsync
     *
     * delete existing custom-field
     *
     * @param  string $field  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiCustomFieldAsync($field)
    {
        return $this->deleteApiCustomFieldAsyncWithHttpInfo($field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteApiCustomFieldAsyncWithHttpInfo
     *
     * delete existing custom-field
     *
     * @param  string $field  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiCustomFieldAsyncWithHttpInfo($field)
    {
        $returnType = '';
        $request = $this->deleteApiCustomFieldRequest($field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteApiCustomField'
     *
     * @param  string $field  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteApiCustomFieldRequest($field)
    {
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling deleteApiCustomField'
            );
        }

        $resourcePath = '/custom-field/{field}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiCustomFields
     *
     * Returns a collection of custom-fields
     *
     * @param  string $sort  (optional)
     * @param  string $page  (optional)
     * @param  string $search search in custom-field names (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getApiCustomFields($sort = null, $page = null, $search = null)
    {
        list($response) = $this->getApiCustomFieldsWithHttpInfo($sort, $page, $search);
        return $response;
    }

    /**
     * Operation getApiCustomFieldsWithHttpInfo
     *
     * Returns a collection of custom-fields
     *
     * @param  string $sort  (optional)
     * @param  string $page  (optional)
     * @param  string $search search in custom-field names (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiCustomFieldsWithHttpInfo($sort = null, $page = null, $search = null)
    {
        $returnType = 'object';
        $request = $this->getApiCustomFieldsRequest($sort, $page, $search);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiCustomFieldsAsync
     *
     * Returns a collection of custom-fields
     *
     * @param  string $sort  (optional)
     * @param  string $page  (optional)
     * @param  string $search search in custom-field names (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiCustomFieldsAsync($sort = null, $page = null, $search = null)
    {
        return $this->getApiCustomFieldsAsyncWithHttpInfo($sort, $page, $search)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiCustomFieldsAsyncWithHttpInfo
     *
     * Returns a collection of custom-fields
     *
     * @param  string $sort  (optional)
     * @param  string $page  (optional)
     * @param  string $search search in custom-field names (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiCustomFieldsAsyncWithHttpInfo($sort = null, $page = null, $search = null)
    {
        $returnType = 'object';
        $request = $this->getApiCustomFieldsRequest($sort, $page, $search);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiCustomFields'
     *
     * @param  string $sort  (optional)
     * @param  string $page  (optional)
     * @param  string $search search in custom-field names (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getApiCustomFieldsRequest($sort = null, $page = null, $search = null)
    {

        $resourcePath = '/custom-fields.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiCustomFields
     *
     * Add custom-field
     *
     * @param  string $name custom field name (optional)
     * @param  string $agent_type options: customer,agent, both . To add customfield for customer or agent (optional)
     * @param  string $field_type fieldType value like textarea, radio (optional)
     * @param  string $sort_order sort order of custom-field (optional)
     * @param  string $dependency array of groups (optional)
     * @param  string $value custom-field placeholder value to added in custom field (optional)
     * @param  string $status custom-field active status (optional)
     * @param  string $required is custom-field required? (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postApiCustomFields($name = null, $agent_type = null, $field_type = null, $sort_order = null, $dependency = null, $value = null, $status = null, $required = null)
    {
        $this->postApiCustomFieldsWithHttpInfo($name, $agent_type, $field_type, $sort_order, $dependency, $value, $status, $required);
    }

    /**
     * Operation postApiCustomFieldsWithHttpInfo
     *
     * Add custom-field
     *
     * @param  string $name custom field name (optional)
     * @param  string $agent_type options: customer,agent, both . To add customfield for customer or agent (optional)
     * @param  string $field_type fieldType value like textarea, radio (optional)
     * @param  string $sort_order sort order of custom-field (optional)
     * @param  string $dependency array of groups (optional)
     * @param  string $value custom-field placeholder value to added in custom field (optional)
     * @param  string $status custom-field active status (optional)
     * @param  string $required is custom-field required? (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiCustomFieldsWithHttpInfo($name = null, $agent_type = null, $field_type = null, $sort_order = null, $dependency = null, $value = null, $status = null, $required = null)
    {
        $returnType = '';
        $request = $this->postApiCustomFieldsRequest($name, $agent_type, $field_type, $sort_order, $dependency, $value, $status, $required);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiCustomFieldsAsync
     *
     * Add custom-field
     *
     * @param  string $name custom field name (optional)
     * @param  string $agent_type options: customer,agent, both . To add customfield for customer or agent (optional)
     * @param  string $field_type fieldType value like textarea, radio (optional)
     * @param  string $sort_order sort order of custom-field (optional)
     * @param  string $dependency array of groups (optional)
     * @param  string $value custom-field placeholder value to added in custom field (optional)
     * @param  string $status custom-field active status (optional)
     * @param  string $required is custom-field required? (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiCustomFieldsAsync($name = null, $agent_type = null, $field_type = null, $sort_order = null, $dependency = null, $value = null, $status = null, $required = null)
    {
        return $this->postApiCustomFieldsAsyncWithHttpInfo($name, $agent_type, $field_type, $sort_order, $dependency, $value, $status, $required)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiCustomFieldsAsyncWithHttpInfo
     *
     * Add custom-field
     *
     * @param  string $name custom field name (optional)
     * @param  string $agent_type options: customer,agent, both . To add customfield for customer or agent (optional)
     * @param  string $field_type fieldType value like textarea, radio (optional)
     * @param  string $sort_order sort order of custom-field (optional)
     * @param  string $dependency array of groups (optional)
     * @param  string $value custom-field placeholder value to added in custom field (optional)
     * @param  string $status custom-field active status (optional)
     * @param  string $required is custom-field required? (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiCustomFieldsAsyncWithHttpInfo($name = null, $agent_type = null, $field_type = null, $sort_order = null, $dependency = null, $value = null, $status = null, $required = null)
    {
        $returnType = '';
        $request = $this->postApiCustomFieldsRequest($name, $agent_type, $field_type, $sort_order, $dependency, $value, $status, $required);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiCustomFields'
     *
     * @param  string $name custom field name (optional)
     * @param  string $agent_type options: customer,agent, both . To add customfield for customer or agent (optional)
     * @param  string $field_type fieldType value like textarea, radio (optional)
     * @param  string $sort_order sort order of custom-field (optional)
     * @param  string $dependency array of groups (optional)
     * @param  string $value custom-field placeholder value to added in custom field (optional)
     * @param  string $status custom-field active status (optional)
     * @param  string $required is custom-field required? (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postApiCustomFieldsRequest($name = null, $agent_type = null, $field_type = null, $sort_order = null, $dependency = null, $value = null, $status = null, $required = null)
    {

        $resourcePath = '/custom-fields.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($agent_type !== null) {
            $formParams['agentType'] = ObjectSerializer::toFormValue($agent_type);
        }
        // form params
        if ($field_type !== null) {
            $formParams['fieldType'] = ObjectSerializer::toFormValue($field_type);
        }
        // form params
        if ($sort_order !== null) {
            $formParams['sortOrder'] = ObjectSerializer::toFormValue($sort_order);
        }
        // form params
        if ($dependency !== null) {
            $formParams['dependency'] = ObjectSerializer::toFormValue($dependency);
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = ObjectSerializer::toFormValue($value);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($required !== null) {
            $formParams['required'] = ObjectSerializer::toFormValue($required);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiCustomField
     *
     * Edit custom-field
     *
     * @param  string $field  (required)
     * @param  string $name custom field name (optional)
     * @param  string $agent_type options: customer,agent, both . To add customfield for customer or agent (optional)
     * @param  string $field_type fieldType value like textarea, radio (optional)
     * @param  string $sort_order sort order of custom-field (optional)
     * @param  string $dependency array of groups (optional)
     * @param  string $value custom-field placeholder value to added in custom field (optional)
     * @param  string $status custom-field active status (optional)
     * @param  string $required is custom-field required? (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putApiCustomField($field, $name = null, $agent_type = null, $field_type = null, $sort_order = null, $dependency = null, $value = null, $status = null, $required = null)
    {
        $this->putApiCustomFieldWithHttpInfo($field, $name, $agent_type, $field_type, $sort_order, $dependency, $value, $status, $required);
    }

    /**
     * Operation putApiCustomFieldWithHttpInfo
     *
     * Edit custom-field
     *
     * @param  string $field  (required)
     * @param  string $name custom field name (optional)
     * @param  string $agent_type options: customer,agent, both . To add customfield for customer or agent (optional)
     * @param  string $field_type fieldType value like textarea, radio (optional)
     * @param  string $sort_order sort order of custom-field (optional)
     * @param  string $dependency array of groups (optional)
     * @param  string $value custom-field placeholder value to added in custom field (optional)
     * @param  string $status custom-field active status (optional)
     * @param  string $required is custom-field required? (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiCustomFieldWithHttpInfo($field, $name = null, $agent_type = null, $field_type = null, $sort_order = null, $dependency = null, $value = null, $status = null, $required = null)
    {
        $returnType = '';
        $request = $this->putApiCustomFieldRequest($field, $name, $agent_type, $field_type, $sort_order, $dependency, $value, $status, $required);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiCustomFieldAsync
     *
     * Edit custom-field
     *
     * @param  string $field  (required)
     * @param  string $name custom field name (optional)
     * @param  string $agent_type options: customer,agent, both . To add customfield for customer or agent (optional)
     * @param  string $field_type fieldType value like textarea, radio (optional)
     * @param  string $sort_order sort order of custom-field (optional)
     * @param  string $dependency array of groups (optional)
     * @param  string $value custom-field placeholder value to added in custom field (optional)
     * @param  string $status custom-field active status (optional)
     * @param  string $required is custom-field required? (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiCustomFieldAsync($field, $name = null, $agent_type = null, $field_type = null, $sort_order = null, $dependency = null, $value = null, $status = null, $required = null)
    {
        return $this->putApiCustomFieldAsyncWithHttpInfo($field, $name, $agent_type, $field_type, $sort_order, $dependency, $value, $status, $required)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiCustomFieldAsyncWithHttpInfo
     *
     * Edit custom-field
     *
     * @param  string $field  (required)
     * @param  string $name custom field name (optional)
     * @param  string $agent_type options: customer,agent, both . To add customfield for customer or agent (optional)
     * @param  string $field_type fieldType value like textarea, radio (optional)
     * @param  string $sort_order sort order of custom-field (optional)
     * @param  string $dependency array of groups (optional)
     * @param  string $value custom-field placeholder value to added in custom field (optional)
     * @param  string $status custom-field active status (optional)
     * @param  string $required is custom-field required? (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiCustomFieldAsyncWithHttpInfo($field, $name = null, $agent_type = null, $field_type = null, $sort_order = null, $dependency = null, $value = null, $status = null, $required = null)
    {
        $returnType = '';
        $request = $this->putApiCustomFieldRequest($field, $name, $agent_type, $field_type, $sort_order, $dependency, $value, $status, $required);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiCustomField'
     *
     * @param  string $field  (required)
     * @param  string $name custom field name (optional)
     * @param  string $agent_type options: customer,agent, both . To add customfield for customer or agent (optional)
     * @param  string $field_type fieldType value like textarea, radio (optional)
     * @param  string $sort_order sort order of custom-field (optional)
     * @param  string $dependency array of groups (optional)
     * @param  string $value custom-field placeholder value to added in custom field (optional)
     * @param  string $status custom-field active status (optional)
     * @param  string $required is custom-field required? (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putApiCustomFieldRequest($field, $name = null, $agent_type = null, $field_type = null, $sort_order = null, $dependency = null, $value = null, $status = null, $required = null)
    {
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling putApiCustomField'
            );
        }

        $resourcePath = '/custom-field/{field}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($agent_type !== null) {
            $formParams['agentType'] = ObjectSerializer::toFormValue($agent_type);
        }
        // form params
        if ($field_type !== null) {
            $formParams['fieldType'] = ObjectSerializer::toFormValue($field_type);
        }
        // form params
        if ($sort_order !== null) {
            $formParams['sortOrder'] = ObjectSerializer::toFormValue($sort_order);
        }
        // form params
        if ($dependency !== null) {
            $formParams['dependency'] = ObjectSerializer::toFormValue($dependency);
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = ObjectSerializer::toFormValue($value);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($required !== null) {
            $formParams['required'] = ObjectSerializer::toFormValue($required);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiCustomFieldOrder
     *
     * Reorder CustomFields
     *
     * @param  string $sortorder assosiative array , in format customField-id:position (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putApiCustomFieldOrder($sortorder = null)
    {
        $this->putApiCustomFieldOrderWithHttpInfo($sortorder);
    }

    /**
     * Operation putApiCustomFieldOrderWithHttpInfo
     *
     * Reorder CustomFields
     *
     * @param  string $sortorder assosiative array , in format customField-id:position (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiCustomFieldOrderWithHttpInfo($sortorder = null)
    {
        $returnType = '';
        $request = $this->putApiCustomFieldOrderRequest($sortorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiCustomFieldOrderAsync
     *
     * Reorder CustomFields
     *
     * @param  string $sortorder assosiative array , in format customField-id:position (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiCustomFieldOrderAsync($sortorder = null)
    {
        return $this->putApiCustomFieldOrderAsyncWithHttpInfo($sortorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiCustomFieldOrderAsyncWithHttpInfo
     *
     * Reorder CustomFields
     *
     * @param  string $sortorder assosiative array , in format customField-id:position (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiCustomFieldOrderAsyncWithHttpInfo($sortorder = null)
    {
        $returnType = '';
        $request = $this->putApiCustomFieldOrderRequest($sortorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiCustomFieldOrder'
     *
     * @param  string $sortorder assosiative array , in format customField-id:position (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putApiCustomFieldOrderRequest($sortorder = null)
    {

        $resourcePath = '/custom-field/order.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($sortorder !== null) {
            $formParams['sortorder'] = ObjectSerializer::toFormValue($sortorder);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
