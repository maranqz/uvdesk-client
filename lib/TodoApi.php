<?php
/**
 * TodoApi
 * PHP version 5
 *
 * @category Class
 * @package  UvdeskApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Uvdesk api
 *
 * The UVdesk API correlates with the Representational State Transfer category (REST) that allows to perform several actions like reading, editing, deleting, adding data of the helpdesk system. Here, we are using subdomain in base path and Token Url. user must modify subdomain to his/her uvdesk subdomain for api access. If you want to download and use api client from top right section. Also then, you must replace subdomain with your subdomain name at uvdesk in downloaded client's baseUrl.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@uvdesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UvdeskApi\UvdeskApi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use UvdeskApi\ApiException;
use UvdeskApi\Configuration;
use UvdeskApi\HeaderSelector;
use UvdeskApi\ObjectSerializer;

/**
 * TodoApi Class Doc Comment
 *
 * @category Class
 * @package  UvdeskApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TodoApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteApiTodo
     *
     * Delete Todo
     *
     * @param  string $id  (required)
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteApiTodo($id, $task_id = null, $thread_id = null, $description = null, $status = null)
    {
        $this->deleteApiTodoWithHttpInfo($id, $task_id, $thread_id, $description, $status);
    }

    /**
     * Operation deleteApiTodoWithHttpInfo
     *
     * Delete Todo
     *
     * @param  string $id  (required)
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteApiTodoWithHttpInfo($id, $task_id = null, $thread_id = null, $description = null, $status = null)
    {
        $returnType = '';
        $request = $this->deleteApiTodoRequest($id, $task_id, $thread_id, $description, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteApiTodoAsync
     *
     * Delete Todo
     *
     * @param  string $id  (required)
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiTodoAsync($id, $task_id = null, $thread_id = null, $description = null, $status = null)
    {
        return $this->deleteApiTodoAsyncWithHttpInfo($id, $task_id, $thread_id, $description, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteApiTodoAsyncWithHttpInfo
     *
     * Delete Todo
     *
     * @param  string $id  (required)
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiTodoAsyncWithHttpInfo($id, $task_id = null, $thread_id = null, $description = null, $status = null)
    {
        $returnType = '';
        $request = $this->deleteApiTodoRequest($id, $task_id, $thread_id, $description, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteApiTodo'
     *
     * @param  string $id  (required)
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteApiTodoRequest($id, $task_id = null, $thread_id = null, $description = null, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteApiTodo'
            );
        }

        $resourcePath = '/todo/{id}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($task_id !== null) {
            $formParams['taskId'] = ObjectSerializer::toFormValue($task_id);
        }
        // form params
        if ($thread_id !== null) {
            $formParams['threadId'] = ObjectSerializer::toFormValue($thread_id);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiTodo
     *
     * Add Todo
     *
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postApiTodo($task_id = null, $thread_id = null, $description = null, $status = null)
    {
        $this->postApiTodoWithHttpInfo($task_id, $thread_id, $description, $status);
    }

    /**
     * Operation postApiTodoWithHttpInfo
     *
     * Add Todo
     *
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiTodoWithHttpInfo($task_id = null, $thread_id = null, $description = null, $status = null)
    {
        $returnType = '';
        $request = $this->postApiTodoRequest($task_id, $thread_id, $description, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postApiTodoAsync
     *
     * Add Todo
     *
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiTodoAsync($task_id = null, $thread_id = null, $description = null, $status = null)
    {
        return $this->postApiTodoAsyncWithHttpInfo($task_id, $thread_id, $description, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiTodoAsyncWithHttpInfo
     *
     * Add Todo
     *
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiTodoAsyncWithHttpInfo($task_id = null, $thread_id = null, $description = null, $status = null)
    {
        $returnType = '';
        $request = $this->postApiTodoRequest($task_id, $thread_id, $description, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiTodo'
     *
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postApiTodoRequest($task_id = null, $thread_id = null, $description = null, $status = null)
    {

        $resourcePath = '/todo.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($task_id !== null) {
            $formParams['taskId'] = ObjectSerializer::toFormValue($task_id);
        }
        // form params
        if ($thread_id !== null) {
            $formParams['threadId'] = ObjectSerializer::toFormValue($thread_id);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiTodo
     *
     * Edit Todo
     *
     * @param  string $id  (required)
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putApiTodo($id, $task_id = null, $thread_id = null, $description = null, $status = null)
    {
        $this->putApiTodoWithHttpInfo($id, $task_id, $thread_id, $description, $status);
    }

    /**
     * Operation putApiTodoWithHttpInfo
     *
     * Edit Todo
     *
     * @param  string $id  (required)
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \UvdeskApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiTodoWithHttpInfo($id, $task_id = null, $thread_id = null, $description = null, $status = null)
    {
        $returnType = '';
        $request = $this->putApiTodoRequest($id, $task_id, $thread_id, $description, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putApiTodoAsync
     *
     * Edit Todo
     *
     * @param  string $id  (required)
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiTodoAsync($id, $task_id = null, $thread_id = null, $description = null, $status = null)
    {
        return $this->putApiTodoAsyncWithHttpInfo($id, $task_id, $thread_id, $description, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiTodoAsyncWithHttpInfo
     *
     * Edit Todo
     *
     * @param  string $id  (required)
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiTodoAsyncWithHttpInfo($id, $task_id = null, $thread_id = null, $description = null, $status = null)
    {
        $returnType = '';
        $request = $this->putApiTodoRequest($id, $task_id, $thread_id, $description, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiTodo'
     *
     * @param  string $id  (required)
     * @param  string $task_id for working on Task taskId is required (optional)
     * @param  string $thread_id for working on Ticket ticketId is required (optional)
     * @param  string $description Desciption of Todo. required for POST Method (optional)
     * @param  string $status 0|1 for icncomplete|complete. default: 0 . required for PUT method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putApiTodoRequest($id, $task_id = null, $thread_id = null, $description = null, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putApiTodo'
            );
        }

        $resourcePath = '/todo/{id}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($task_id !== null) {
            $formParams['taskId'] = ObjectSerializer::toFormValue($task_id);
        }
        // form params
        if ($thread_id !== null) {
            $formParams['threadId'] = ObjectSerializer::toFormValue($thread_id);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
